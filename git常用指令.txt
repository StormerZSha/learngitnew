git init
git add
git commit

git status  //查看状态
git diff      //查看不同
git log      //查看记录
 HEAD表示当前版本，HEAD^表示上个版本，HEAD~n(n表示向前的n个版本)
git reset  --hard HEAD^ //回退到上个版本
git reset --hard 版本号     //到对应的版本
git reflog                           //查看以前的命令，方便查看丢失的版本号
git checkout -- 文件名     //丢弃工作区的修改，回到最近一次add或者commit
git reset HEAD 文件名     //丢弃暂存区的修改，回到工作区
git rm 文件名                    //删除版本库中的文件，无法找回
如果删掉了工作区的，版本库的没删，可以使用git checkout -- 文件名找回
git remote add origin +加上连接地址   //将本地库与远程库关联  
git push origin master                           //将本地库推送到远程库 
git push -u orgin master                      // 将本地master分支推送到远程master分支且关联 ,一般第一次推送使用这个


git branch                                                             //查看所有分支
git branch  分支名                                                 //创建分支
git checkout 分支名/git switch 分支名                //切换分支
git checkout -b 分支名/git switch -c 分支名       //创建并切换分支
git merge 分支名                                                  //合并分支到当前分支
git branch -d                                                      //删除分支

当合并分支，出现冲突时，需要手动解决冲突再提交
使用git log --graph 可以查看分支合并的记录

一般合并git会使用fast forward 模式，这样后来是看不出合并过
合并时使用 no-ff模式 就可以普通合并，后来也能看出合并过
使用no-ff模式提交会自动生成一个新的commit
所以no-ff模式一般git merge --no-ff -m "提交时的信息" 分支名

实际工作时，master仅用了发布新版本，一般在dev上工作
每个人都有自己的分支，会时不时的向dev上合并

在修复bug时，我们一般会创建新的bug分支进行修复，然后修复，提交，合并，最后删除
如果当前工作没有完成，修bug前需要git stash 保存一下，修复完成后可以使用git stash pop恢复原来状态
修复了当前分支的bug,如果其他分支也有同样的bug,只需要先切换到那个分支然后将修复bug的那个提交复制过去就行了
git cherry-pick 提交的版本号

开发新新需求建议使用新分支
删除没有合并的分支需要使用D,git branch -D 分支名，不然无法删除

多人协作时，可以先尝试push自己的修改,如果失败就pull，然后合并和解决冲突，最后再push
如果pull失败需要按照提示创建分支的关联

git rebase可以让本地没有push的历史记录整理成一条直线

为了方便管理一般会对特定的提交打上tag
git tag 标签名，标签默认是打在当前分支的最新commit上
git tag 标签名 提交id,为特定的commit打上标签
git tag -a 标签名 -m "说明" 提交id，带有说明的标签                      git show 标签名，可以看到标签的介绍和说明
git tag ,查看现有的所以标签

git push origin 标签名，推一个本地标签到远程
git push origin --tags,  推送所以未推送过的本地标签
git tag -d 标签名，删除一个本地标签
git push origin :refs/tags/标签名，删除一个远程标签